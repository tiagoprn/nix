# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

# Add the path to your overlay directory to the Nixpkgs overlays list.
# The overlay needs to be referenced relatively to the configuration.nix file.
let
  # List of Neovim build dependencies
  neovimBuildDeps = [
    pkgs.glibc
    pkgs.libtermkey
    pkgs.libuv
    pkgs.libvterm
    pkgs.unibilium
    pkgs.msgpack
    pkgs.luajit
    pkgs.pkgconfig
    pkgs.stdenv.cc # Compiler (GCC) package, needed for building
    pkgs.makeWrapper
    pkgs.gettext
  ];

  # Gotten the revision for 0.25.2 here:
  # https://lazamar.co.uk/nix-versions/?channel=nixpkgs-unstable&package=kitty
  # (clicking the link to the revision open a page with the code below)
  old_kitty_pkg = import (builtins.fetchGit {
    # Descriptive name to make the store path easier to identify
    name = "my-old-revision";
    url = "https://github.com/NixOS/nixpkgs/";
    ref = "refs/heads/nixpkgs-unstable";
    rev = "c2c0373ae7abf25b7d69b2df05d3ef8014459ea3";
  }) {};

  old_kitty = old_kitty_pkg.kitty;

in
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Setup keyfile
  boot.initrd.secrets = {
    "/crypto_keyfile.bin" = null;
  };

  # Enable swap on luks
  boot.initrd.luks.devices."luks-b7d87692-69e8-4fb0-abd7-73dca1955c10".device = "/dev/disk/by-uuid/b7d87692-69e8-4fb0-abd7-73dca1955c10";
  boot.initrd.luks.devices."luks-b7d87692-69e8-4fb0-abd7-73dca1955c10".keyFile = "/crypto_keyfile.bin";

  # Add module to the boot kernel modules
  boot.extraModulePackages = [ config.boot.kernelPackages.v4l2loopback ];
  boot.kernelModules = [ "v4l2loopback" ];  # these module allows creating a virtual webcam for sharing my screen on Zoom and other software

  networking.hostName = "nixos-lab"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "America/Sao_Paulo";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the GNOME Desktop Environment.
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = "us";
    # the RIGHT ALT key (often labeled "AltGr") provides access to additional characters.
    # To produce the "ç" (cedilla) character using the "altgr-intl" variant:
    # 	You press AltGr + , (comma) to get "ç".
    # 	For the uppercase "Ç", it's typically AltGr + Shift + ,.
    xkbVariant = "altgr-intl";
  };

  # Configure console keymap
  console.keyMap = "us-acentos";

  # Enable CUPS to print documents.
  services.printing.enable = false;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  security.sudo.wheelNeedsPassword = false;

  systemd.user.services.gsettings = {
    description = "disable CAPS LOCK key (it freezes the laptop when pressed)";
    serviceConfig.ExecStart = let
      script = pkgs.writeScript "gsettings-script" ''
        #!/bin/sh
        gsettings set org.gnome.desktop.input-sources xkb-options "['caps:none']"
      '';
    in "${script}";
    wantedBy = [ "default.target" ];
  };

  # systemd.user.services.ydotoold = {
  #   description = "daemon for ydotool";
  #   wantedBy = [ "default.target" ];
  #   serviceConfig = {
  #     ExecStart = "${pkgs.ydotool}/bin/ydotoold";
  #     Restart = "always";
  #   };
  # };

  nixpkgs.config.packageOverrides = pkgs: {

    # ffmpeg_stream = pkgs.ffmpeg.overrideAttrs (oldAttrs: {
    #   buildInputs = oldAttrs.buildInputs ++ [ pkgs.v4l_utils ];
    #   configureFlags = oldAttrs.configureFlags ++ [ "--enable-libv4l2" ];
    # });


    ffmpegV4l2 = pkgs.ffmpeg.override {
      enableLibv4l2 = true;
      enableV4l2M2M = true;
    };

  };


  fonts.packages= with pkgs; [
    nerdfonts
    meslo-lgs-nf
  ];

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.tiago = {
    isNormalUser = true;
    description = "tiago";
    extraGroups = [ "networkmanager" "wheel" "input" "video" ];  # the video group allows access to the v4l2 devices for streaming to the virtual webcam
    packages = with pkgs; [
      # TODO: move to section environment.systemPackages below
      firefox-wayland
      htop
      bash-completion
      netdata
      ncdu
      tree
      cowsay
      ioping
      stress-ng
      iotop
      rclone
      nmap
      strace
      dnstracer
      imagemagick
      yewtube
      mplayer
      ffmpeg
      mpv
      vlc
      pavucontrol
      screenfetch
      neofetch
      figlet
      inxi
      tty-clock
      gparted
      tcptraceroute
      ccze
      mypaint
      fio
      sysbench
      hdparm
      fsarchiver
      qrencode
      wyrd
      inotify-tools
      slop
      pass
      pass-wayland
      pulsemixer
      meld
      starship
      figlet

      # NOTE: to enable my PDE with nvim
      difftastic
      fd
      ripgrep
      pandoc
      delta
      gitg
      tig
      mupdf
      fira-code
      fira-code-symbols
      cmake
      asciidoc
      zathura
      font-awesome
      navi
      mosh
      fzf
      bat
      entr
      # old_kitty  # that is because 0.29.2 did not work with wayland: https://github.com/kovidgoyal/kitty/issues/5456
      kitty
      alacritty
      wezterm
      foot
      clifm
    ] ++ [
      libunistring
      libidn2
      tzdata
      zlib
      zlib.dev
      readline
      readline.dev
      bzip2
      bzip2.dev
      ncurses
      ncurses.dev
      sqlite
      sqlite.dev
      openssl
      openssl.dev
      libuuid
      libuuid.dev
      gdbm
      lzlib
      tk
      tk.dev
      libffi
      libffi.dev
      expat
      expat.dev
      mailcap
      xz
      xz.dev
    ];
  };

  # Add a static file to the system configuration
  environment.etc."bash_profile_for_tiago".text = ''
    if [ -f ~/.bashrc ]; then
      source ~/.bashrc
    fi
  '';

  # At system activation time, copy it over to the user's home directory
  system.activationScripts.copyBashProfile = ''
    cp /etc/static/bash_profile_for_tiago /home/tiago/.bash_profile \
    	&& chown tiago:users /home/tiago/.bash_profile
  '';

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    vim
    git
    gnumake
    python310Full
    python310Packages.supervisor
    python310Packages.pipx
    cargo
    rustc
    go
    jq
    tmux
    tmuxp
    gitui
    git-sync
    difftastic
    # texlive-combined-full
    # texlive-combined-tetex
    lua-language-server
    shellcheck
    nodejs_20
    shfmt
    xz
    w3m
    duf  # disk usage/free utility
    dua  # disk usage of directories
    direnv  # load and unload environment variables depending on the current directory
    yq  # YAML processor ("jq" for YAML files)
    wl-clipboard
    rofi-wayland
    # below enables wlr/workspaces module on waybar:
    (waybar.overrideAttrs (oldAttrs: { mesonFlags = oldAttrs.mesonFlags ++ [ "-Dexperimental=true "]; }))
    gsettings-desktop-schemas
    xdg-utils
    bibata-cursors
    bibata-cursors-translucent
    wayland-protocols
    wayland-utils
    gnome.adwaita-icon-theme
    gnome.gnome-themes-extra
    qt5.qtwayland
    qt6.qmake
    qt6.qtwayland
    adwaita-qt
    adwaita-qt6
    wlroots
    wlr-randr
    wlprop
    hyprpicker
    networkmanagerapplet
    libnotify
    mako
    cliphist
    grim  # screenshot
    slurp  # screen area selection
    imagemagick
    swappy  # snapshot editing/drawing tool
    wf-recorder  # screen video recording
    remind
    util-linux  # provides ncal
    v4l_utils  # video4linux utils to allow screensharing my screen into a virtual webcam
    # ydotool
  ] ++ neovimBuildDeps; # concatenate the neovimBuildDeps list here;

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  services.flatpak.enable = true;
  services.dbus.enable = true;
  services.gvfs.enable = true;

  programs.hyprland = {
    enable = true;
    xwayland = {
      enable = true;
    };
  };

  xdg.portal = {
    enable = true;
    # extraPortals = with pkgs; [
    #   xdg-desktop-portal-gtk
    #   xdg-desktop-portal-hyprland
    # ];
    # wlr = {
    #   enable = true;
    #   settings = {
    #     screencast = {
    #       output_name = "eDP-1";
    #       max_fps = 30;
    #       chooser_type = "simple";
    #       chooser_cmd = "${pkgs.slurp}/bin/slurp -f %o -or";
    #     };
    #   };
    # };
  };

  environment.sessionVariables = {
    POLKIT_AUTH_AGENT = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
    GSETTINGS_SCHEMA_DIR = "${pkgs.gsettings-desktop-schemas}/share/gsettings-schemas/${pkgs.gsettings-desktop-schemas.name}/glib-2.0/schemas";
    MOZ_ENABLE_WAYLAND = "1";
    SDL_VIDEODRIVER = "wayland";
    _JAVA_AWT_WM_NONREPARENTING = "1";
    CLUTTER_BACKEND = "wayland";
    WLR_RENDERER = "vulkan";
    # GTK_USE_PORTAL = "1";  # must not be enabled, causes problems with some apps: https://discourse.nixos.org/t/open-links-from-flatpak-via-host-firefox/15465/2
    NIXOS_XDG_OPEN_USE_PORTAL = "1";
    # If your cursor becomes invisible
    WLR_NO_HARDWARE_CURSORS = "1";
    # Hint electron apps to use wayland
    NIXOS_OZONE_WL = "1";
    # Below is a fix to force OBS docks and integrations all work under xwayland to bypass bugs on wayland. Enable only if OBS does not behave well.
    # QT_QPA_PLATFORM = "xcb obs"
  };

  hardware = {
      # Opengl
      opengl.enable = true;
  };


  # Enable the OpenSSH daemon.

  services.openssh = {
    enable = true; # This ensures that the SSH service is enabled

    settings = {
      PermitRootLogin = "without-password";
      PasswordAuthentication = false;
    };
  };

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

}
